let colorContrast = { node1: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-pink-600 via-red-500 to-orange-500", clr: "text-white" }, node2: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-500", clr: "text-white" }, node3: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-green-500 via-teal-500 to-cyan-500", clr: "text-white" }, node4: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-yellow-400 via-yellow-500 to-yellow-600", clr: "text-black" }, node5: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-red-400 via-red-500 to-red-600", clr: "text-white" }, node6: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500", clr: "text-white" }, node7: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-yellow-500 via-orange-500 to-red-500", clr: "text-white" }, node8: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-gray-500 via-gray-600 to-gray-700", clr: "text-white" }, node9: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-teal-400 via-teal-500 to-teal-600", clr: "text-white" }, node10: { bg: "w-full h-full border-4 border-white rounded-lg p-8 font-sans text-center text-lg flex items-center justify-center bg-gradient-to-br from-purple-400 via-purple-500 to-purple-600", clr: "text-white" } }, arr_sent = ["Dii, is safar mein aapki muskurahat rang laye, pyaar ka saathi banke. \uD83D\uDE0A", "Aapke liye, har kadam pe pyaar bhara ho, taqat se bhi zyada. \uD83D\uDCAA", "Dii, shaadi ki din mein, pyaar se bhara ho har pal. \uD83D\uDC95", "Shaadi ki taal mein, ek pyaara sa taara bano aap. \uD83C\uDF1F", "Jo rishta banega, woh rahega taqat se bhara, aur pyaar se bhi gehra. \uD83D\uDC98", "Dii, is prem kahani mein khilte raho pyaar ke phool, dil se bhara. \uD83C\uDF39", "Dil ko chu jane wale palon ka samay aaya hai, Dii, aapki shadi ka. \uD83C\uDF89", "Dii, is prem kahani mein odh lo pyaar bhari chaadar, aur gungunate raho. \uD83C\uDFB6", "aur ant mai ye kehna hai", "One love, one heart, one destiny. \uD83D\uDC96"]; const text = new SplitType(".splitit", { type: "words" }); class Animations { static anim01() { gsap.timeline().from(".word", { x: -10, opacity: 0, duration: .3, stagger: .3 }) } static anim02() { gsap.timeline().from(".word", { x: 10, opacity: 0, duration: .3, stagger: .3 }) } static anim03() { gsap.timeline().from(".word", { x: -10, y: -10, opacity: 0, duration: .3, stagger: .3 }) } static anim04() { gsap.timeline().from(".word", { x: 10, y: 10, opacity: 0, duration: .3, stagger: .3 }) } static anim05() { gsap.timeline().from(".word", { y: -10, opacity: 0, duration: .3, stagger: .3 }) } static anim06() { gsap.timeline().from(".word", { y: 10, opacity: 0, duration: .3, stagger: .3 }) } static anim07() { gsap.timeline().from(".word", { x: 10, y: -10, opacity: 0, duration: .3, stagger: .3 }) } static anim08() { gsap.timeline().from(".word", { x: -10, y: 10, opacity: 0, duration: .3, stagger: .3 }) } } let sentenceIndex = 0, timeoutId, touchStarted = !1, touchStartTime = 0; function getSequentialSentence() { return sentenceIndex < arr_sent.length ? arr_sent[sentenceIndex] : "All sentences have been iterated." } function applyRandomColorContrast() { let e = colorContrast["node" + (Math.floor(10 * Math.random()) + 1)]; $("#cont").attr("class", e.bg + " " + e.clr) } function applyRandomAnimation() { let e = ["anim01", "anim02", "anim03", "anim04", "anim05", "anim06", "anim07", "anim08"], t = e[Math.floor(Math.random() * e.length)]; Animations[t]() } function splitSentenceAndAnimate(e) { $("#para-line").html('<div id="text-split-container">' + e.split(" ").map(e => `<div class="word">${e}</div>`).join(" ") + "</div>"); let t = gsap.timeline(); applyRandomColorContrast(), applyRandomAnimation(), new SplitType("#text-split-container", { types: "words", wordsClass: "word" }), t.eventCallback("onComplete", function () { if (sentenceIndex++, allSentencesIterated()) $("#last-page").fadeIn(500); else { let e = touchStarted ? 5e3 - (Date.now() - touchStartTime) : 5e3; timeoutId = setTimeout(generateSequentialContentAndCheck, e) } }) } function allSentencesIterated() { return sentenceIndex >= arr_sent.length } function generateSequentialContentAndCheck() { if (allSentencesIterated()) { $("#last-page").fadeIn(500); return } let e = getSequentialSentence(); splitSentenceAndAnimate(e) } $("#start-anim").click(function () { $("#pianoAudio").get(0).play(), clearTimeout(timeoutId), $(this).fadeOut(200), generateSequentialContentAndCheck() }), $(window).on("touchstart", function () { touchStartTime = Date.now(), touchStarted = !0, clearTimeout(timeoutId) }), $(window).on("touchend", function () { touchStarted = !1; let e = 5e3 - (Date.now() - touchStartTime); timeoutId = setTimeout(generateSequentialContentAndCheck, e) });